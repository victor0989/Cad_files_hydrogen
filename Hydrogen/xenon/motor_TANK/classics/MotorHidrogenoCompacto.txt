# -*- coding:utf-8 -*-
import FreeCAD as App,FreeCADGui as Gui,Part,math
doc_name="Quantum_Ion_Drive"
if App.ActiveDocument is None or App.ActiveDocument.Label!=doc_name:App.newDocument(doc_name)
doc=App.ActiveDocument

P={
    "nose_len":500.0,"nose_base_d":900.0,
    "mid_len":1800.0,"mid_d":1800.0,
    "rear_len":1200.0,"rear_d":2000.0,
    "hull_t":15.0,
    "reactor_d":1500.0,"reactor_l":1600.0,"reactor_cx":2800.0,
    "ring_h":40.0,"ring_ro":1000.0,"ring_ri":950.0,
    "ring_n":18,"ring_pitch":100.0,
    "coil_rect_w":100.0,"coil_rect_h":100.0,
    "coil_R":1100.0,"coil_n":12,"coil_span":1600.0,
    "nozzle_throat_d":400.0,"nozzle_exit_d":1600.0,"nozzle_l":1500.0,
    "nozzle_cx":3500.0
}

X_AXIS=App.Vector(1,0,0);Y_AXIS=App.Vector(0,1,0);Z_AXIS=App.Vector(0,0,1)
def rot_to_x():return App.Rotation(Y_AXIS,90)
def add_obj(s,l):o=doc.addObject("Part::Feature",l);o.Shape=s;return o
def make_cyl_x(d,L,cx=0,cy=0,cz=0,l="CylX"):r=d/2.0;c=Part.makeCylinder(r,L);c.Placement=App.Placement(App.Vector(cx-L/2.0,cy,cz),rot_to_x());return add_obj(c,l)
def make_cone_x(d1,d2,L,cx=0,cy=0,cz=0,l="ConeX"):r1=d1/2.0;r2=d2/2.0;c=Part.makeCone(r1,r2,L);c.Placement=App.Placement(App.Vector(cx-L/2.0,cy,cz),rot_to_x());return add_obj(c,l)
def make_hollow(o,t,l="Shell"): 
    try:i=o.makeOffsetShape(-t,0.01,join=2,fill=True);s=o.cut(i);return add_obj(s,l)
    except:return add_obj(o,l+"_f")

# Carcasa principal
nose=make_cone_x(P["nose_base_d"],0,P["nose_len"],cx=P["nose_len"]/2,l="Nose")
mid=make_cyl_x(P["mid_d"],P["mid_len"],cx=P["nose_len"]+P["mid_len"]/2,l="Mid")
rear=make_cyl_x(P["rear_d"],P["rear_len"],cx=P["nose_len"]+P["mid_len"]+P["rear_len"]/2,l="Rear")
hull=make_hollow(nose.Shape.fuse(mid.Shape).fuse(rear.Shape),P["hull_t"],l="Hull")

# Reactor central
reactor=make_cyl_x(P["reactor_d"],P["reactor_l"],cx=P["reactor_cx"],l="Reactor")

# Anillos concéntricos
rings=[];x0=P["reactor_cx"]-P["reactor_l"]/2+P["ring_h"]/2
for i in range(P["ring_n"]):
    x=x0+i*P["ring_pitch"]
    r=Part.makeTorus((P["ring_ro"]+P["ring_ri"])/2,(P["ring_ro"]-P["ring_ri"])/2)
    r.Placement=App.Placement(App.Vector(x,0,0),rot_to_x())
    rings.append(r)
rS=rings[0]
for r in rings[1:]:rS=rS.fuse(r)
rings_obj=add_obj(rS,"Rings")

# Bobinas tipo tokamak
coils=[];cx0=P["reactor_cx"]-P["coil_span"]/2
for i in range(P["coil_n"]):
    cx=cx0+i*(P["coil_span"]/(P["coil_n"]-1))
    coils.append(Part.makeTorus(P["coil_R"],P["coil_rect_w"]/2).translate(App.Vector(cx,0,0)))
cS=coils[0]
for c in coils[1:]:cS=cS.fuse(c)
coils_obj=add_obj(cS,"Coils")

# Barras verticales (inyectores/cuánticas)
bars=[]
for i in range(12):
    angle = i*(360/12)
    r = (P["ring_ro"]+P["ring_ri"])/2
    y = r*math.cos(math.radians(angle))
    z = r*math.sin(math.radians(angle))
    bar = Part.makeCylinder(20, P["reactor_l"])
    bar.Placement = App.Placement(App.Vector(P["reactor_cx"]-P["reactor_l"]/2,y,z),rot_to_x())
    bars.append(bar)
bS=bars[0]
for b in bars[1:]: bS=bS.fuse(b)
bars_obj=add_obj(bS,"Quantum_Bars")

# Tobera
noz=Part.makeCone(P["nozzle_throat_d"]/2,P["nozzle_exit_d"]/2,P["nozzle_l"])
noz.Placement=App.Placement(App.Vector(P["nozzle_cx"]-P["nozzle_l"]/2,0,0),rot_to_x())
noz_obj=add_obj(noz,"Nozzle")

# Agrupar
grp=doc.addObject("App::Part","QuantumIonMotor")
for o in[hull,reactor,rings_obj,coils_obj,bars_obj,noz_obj]:grp.addObject(o)
doc.recompute()
try:Gui.ActiveDocument.ActiveView.viewAxonometric();Gui.SendMsgToActiveView("ViewFit")
except:pass